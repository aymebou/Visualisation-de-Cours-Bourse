#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('version2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = 4000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var update = require('../updateData.js');
var schedule = require('node-schedule');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log("Server started");
    var rule = new schedule.RecurrenceRule();
    rule.second = [0, 20, 40];
    schedule.scheduleJob(rule, function(){

        update.update('2018-03-20 10:00','2018-04-06 10:00', 'amzn');
    });
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}




/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);


}
